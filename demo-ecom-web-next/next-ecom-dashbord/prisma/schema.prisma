generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  billboards Billbord[]  @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes      Size[]     @relation("StoreToSize")
  colors     Color[]    @relation("StoreToColor")
  products   Product[]  @relation("StoreToProduct")

  // @@index([userId])
}

model Billbord {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[] @relation("BillbordToCategory")

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  billbordId  String    @db.ObjectId
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billbord    Billbord  @relation("BillbordToCategory", fields: [billbordId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billbordId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[] @relation("SizeToProduct")

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  categoryId  String    @db.ObjectId
  name        String
  price       Float
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    @db.ObjectId
  colorId     String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  category    Category   @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size        Size       @relation("SizeToProduct", fields: [sizeId], references: [id])
  color       Color      @relation("ColorToProduct", fields: [colorId], references: [id])
  images      Image[]    @relation("ProductToImage")

  @@index([categoryId])
  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  product   Product   @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([productId])
}
